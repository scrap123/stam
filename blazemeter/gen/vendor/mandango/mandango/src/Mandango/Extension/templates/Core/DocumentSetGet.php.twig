<?php

    /**
     * Set a document data value by data name as string.
     *
     * @param string $name  The data name.
     * @param mixed  $value The value.
     *
     * @return mixed the data name setter return value.
     *
     * @throws \InvalidArgumentException If the data name is not valid.
     */
    public function set($name, $value)
    {
{# fields #}
{% for name in config_class.fields|keys %}
        if ('{{ name }}' == $name) {
            return $this->set{{ name|ucfirst }}($value);
        }
{% endfor %}
{# referencesOne #}
{% for name in config_class.referencesOne|keys %}
        if ('{{ name }}' == $name) {
            return $this->set{{ name|ucfirst }}($value);
        }
{% endfor %}
{# embeddedsOne #}
{% for name in config_class.embeddedsOne|keys %}
        if ('{{ name }}' == $name) {
            return $this->set{{ name|ucfirst }}($value);
        }
{% endfor %}
{# inheritance #}
{% if config_class.inheritance %}
        try {
            return parent::set($name, $value);
        } catch (\InvalidArgumentException $e) {
        }
{% endif %}
{# inheritance #}
{% if config_class.inheritance %}
        try {
            return parent::get($name);
        } catch (\InvalidArgumentException $e) {
        }
{% endif %}

        throw new \InvalidArgumentException(sprintf('The document data "%s" is not valid.', $name));
    }

    /**
     * Returns a document data by data name as string.
     *
     * @param string $path The data path devided by dots (example : profile.name).
     *
     * @return mixed The data name getter return value.
     *
     * @throws \InvalidArgumentException If the data name is not valid.
     */
    public function getPath($path)
    {
        $dot_position = strpos($path,'.');
        if($dot_position ===false){
            return $this->get($path);
        }else{
            $sub_name = substr($path,0,$dot_position);
            $sub_field = $this->get($sub_name);
            if($sub_field == null){
                return null;
            }else{
                if($sub_field instanceof \Mandango\Document\AbstractDocument && method_exists($sub_field,'get')){
                    return $sub_field->getPath(substr($path,$dot_position+1),true);
                }
            }
        }

        return null;
    }

    /**
     * Returns a document data by data path as string.
     *
     * @param string $name The data name.
     *
     * @return mixed The data name getter return value.
     *
     * @throws \InvalidArgumentException If the data name is not valid.
     */
    public function get($name)
    {
{# fields #}
{% for name in config_class.fields|keys %}
        if ('{{ name }}' == $name) {
            return $this->get{{ name|ucfirst }}();
        }
{% endfor %}
{# referencesOne #}
{% for name in config_class.referencesOne|keys %}
        if ('{{ name }}' == $name) {
            return $this->get{{ name|ucfirst }}();
        }
{% endfor %}
{# referencesMany #}
{% for name in config_class.referencesMany|keys %}
        if ('{{ name }}' == $name) {
            return $this->get{{ name|ucfirst }}();
        }
{% endfor %}
{# embeddedsOne #}
{% for name in config_class.embeddedsOne|keys %}
        if ('{{ name }}' == $name) {
            return $this->get{{ name|ucfirst }}();
        }
{% endfor %}
{# embeddedsMany #}
{% for name in config_class.embeddedsMany|keys %}
        if ('{{ name }}' == $name) {
            return $this->get{{ name|ucfirst }}();
        }
{% endfor %}
{# inheritance #}
{% if config_class.inheritance %}
        try {
            return parent::get($name);
        } catch (\InvalidArgumentException $e) {
        }
{% endif %}

        throw new \InvalidArgumentException(sprintf('The document data "%s" is not valid.', $name));
    }
